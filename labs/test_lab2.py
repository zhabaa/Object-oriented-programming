from lab2 import Printer, Color, ANSI
import json

def demo_printer_workflow():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã Printer —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –ø—Ä–∏–º–µ—Ä–∞–º–∏"""
    print("=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ê–ë–û–¢–´ PRINTER ===\n")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —à—Ä–∏—Ñ—Ç JSON
    test_font = {
        "A": [" # ", "# #", "###", "# #", "# #"],
        "B": ["## ", "# #", "## ", "# #", "## "],
        "C": [" ##", "#  ", "#  ", "#  ", " ##"],
        "L": ["#  ", "#  ", "#  ", "#  ", "###"],
        "O": [" ##", "# #", "# #", "# #", " ##"],
        "V": ["# #", "# #", "# #", "# #", " # "],
        "E": ["###", "#  ", "## ", "#  ", "###"],
        "U": ["# #", "# #", "# #", "# #", " # "],
        "!": [" # ", " # ", " # ", "   ", " # "],
        " ": ["   ", "   ", "   ", "   ", "   "],
        "I": ["###", " # ", " # ", " # ", "###"],
        "‚ô•": ["# #", "###", "###", " # ", " # "]
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —à—Ä–∏—Ñ—Ç –≤ —Ñ–∞–π–ª
    with open("demo_font.json", "w", encoding="utf-8") as f:
        json.dump(test_font, f, indent=2)
    
    print("1. üìù –ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä - –ø–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–∞:")
    print("–°–æ–∑–¥–∞–µ–º Printer —Å –∑–µ–ª–µ–Ω—ã–º —Ü–≤–µ—Ç–æ–º, –ø–æ–∑–∏—Ü–∏–µ–π (1,1), —Å–∏–º–≤–æ–ª–æ–º '‚ô°'")
    
    with Printer(Color.GREEN, (1, 1), "‚ô°", "demo_font.json") as printer:
        printer.print("I LOVE YOU!")
    print("‚úÖ –¢–µ–∫—Å—Ç 'I LOVE YOU!' –Ω–∞–ø–µ—á–∞—Ç–∞–Ω\n")
    
    print("2. üé® –†–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞ –∏ —Å–∏–º–≤–æ–ª—ã:")
    
    # –ö—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Å–µ—Ä–¥–µ—á–∫–∞–º–∏
    with Printer(Color.RED, (1, 10), "‚ô•", "demo_font.json") as printer:
        printer.print("HEART")
    print("‚úÖ –ö—Ä–∞—Å–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —Å–µ—Ä–¥–µ—á–∫–∞–º–∏\n")
    
    # –°–∏–Ω–∏–π —Ç–µ–∫—Å—Ç —Å–æ –∑–≤–µ–∑–¥–∞–º–∏
    with Printer(Color.BLUE, (1, 20), "*", "demo_font.json") as printer:
        printer.print("STAR")
    print("‚úÖ –°–∏–Ω–∏–π —Ç–µ–∫—Å—Ç —Å–æ –∑–≤–µ–∑–¥–∞–º–∏\n")
    
    # –ñ–µ–ª—Ç—ã–π —Ç–µ–∫—Å—Ç —Å –ø–ª—é—Å–∏–∫–∞–º–∏
    with Printer(Color.YELLOW, (1, 30), "+", "demo_font.json") as printer:
        printer.print("PLUS")
    print("‚úÖ –ñ–µ–ª—Ç—ã–π —Ç–µ–∫—Å—Ç —Å –ø–ª—é—Å–∏–∫–∞–º–∏\n")
    
    print("3. üìç –†–∞–∑–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:")
    
    with Printer(Color.CYAN, (5, 5), "#", "demo_font.json") as printer:
        printer.print("TOP")
    print("‚úÖ –¢–µ–∫—Å—Ç –≤ –ø–æ–∑–∏—Ü–∏–∏ (5,5)\n")
    
    with Printer(Color.MAGENTA, (10, 15), "‚óã", "demo_font.json") as printer:
        printer.print("CENTER")
    print("‚úÖ –¢–µ–∫—Å—Ç –≤ –ø–æ–∑–∏—Ü–∏–∏ (10,15)\n")
    
    print("4. üéØ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥:")
    
    Printer.print_static(
        text="STATIC",
        position=(15, 1),
        color=Color.WHITE,
        symbol="‚ñà",
        font_file="demo_font.json"
    )
    print("‚úÖ –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω\n")
    
    print("5. üíï –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã:")
    
    with Printer(Color.RED, (20, 1), "‚ô•", "demo_font.json") as printer:
        printer.print("LOVE")
    print("‚úÖ –¢–µ–∫—Å—Ç —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏\n")
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    import os
    os.remove("demo_font.json")
    
    print("üéä –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

def demo_font_loading():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —à—Ä–∏—Ñ—Ç–æ–≤"""
    print("\n=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –®–†–ò–§–¢–û–í ===\n")
    
    # –°–æ–∑–¥–∞–µ–º JSON —à—Ä–∏—Ñ—Ç
    json_font = {
        "J": ["  #", "  #", "  #", "# #", " # "],
        "S": [" ##", "#  ", " # ", "  #", "## "],
        "O": [" ##", "# #", "# #", "# #", " ##"],
        "N": ["# #", "## ", "## ", "# #", "# #"]
    }
    
    with open("test_json_font.json", "w", encoding="utf-8") as f:
        json.dump(json_font, f)
    
    # –°–æ–∑–¥–∞–µ–º TXT —à—Ä–∏—Ñ—Ç
    txt_font_content = """H
# #
# #
###
# #
# #
E
###
#  
## 
#  
###
L
#  
#  
#  
#  
###
"""
    with open("test_txt_font.txt", "w", encoding="utf-8") as f:
        f.write(txt_font_content)
    
    print("1. üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ JSON —à—Ä–∏—Ñ—Ç–∞:")
    try:
        font_json = Printer._load_font("test_json_font.json")
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(font_json)}")
        print(f"   –°–∏–º–≤–æ–ª—ã: {list(font_json.keys())}")
        print(f"   –í—ã—Å–æ—Ç–∞ —Å–∏–º–≤–æ–ª–æ–≤: {len(font_json['J'])}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\n2. üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ TXT —à—Ä–∏—Ñ—Ç–∞:")
    try:
        font_txt = Printer._load_font("test_txt_font.txt")
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(font_txt)}")
        print(f"   –°–∏–º–≤–æ–ª—ã: {list(font_txt.keys())}")
        print(f"   –ü—Ä–∏–º–µ—Ä —Å–∏–º–≤–æ–ª–∞ 'H': {font_txt['H']}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\n3. üö® –¢–µ—Å—Ç –æ—à–∏–±–∫–∏ (–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç):")
    try:
        Printer._load_font("test.unknown")
        print("‚ùå –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞!")
    except Exception as e:
        print(f"‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
    import os
    os.remove("test_json_font.json")
    os.remove("test_txt_font.txt")

def demo_colors_and_symbols():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Ü–≤–µ—Ç–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤"""
    print("\n=== –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –¶–í–ï–¢–û–í –ò –°–ò–ú–í–û–õ–û–í ===\n")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π —à—Ä–∏—Ñ—Ç
    simple_font = {
        "A": [" # ", "# #", "###", "# #", "# #"],
        "B": ["## ", "# #", "## ", "# #", "## "]
    }
    
    with open("simple_font.json", "w", encoding="utf-8") as f:
        json.dump(simple_font, f)
    
    colors = [
        (Color.RED, "–ö–†–ê–°–ù–´–ô"),
        (Color.GREEN, "–ó–ï–õ–ï–ù–´–ô"),
        (Color.YELLOW, "–ñ–ï–õ–¢–´–ô"),
        (Color.BLUE, "–°–ò–ù–ò–ô"),
        (Color.MAGENTA, "–ú–ê–î–ñ–ï–ù–¢–ê"),
        (Color.CYAN, "–¶–ò–ê–ù"),
        (Color.WHITE, "–ë–ï–õ–´–ô")
    ]
    
    symbols = ["‚ô•", "‚òÖ", "‚ô¶", "‚ô£", "‚ô†", "‚óè", "‚ñ†", "‚ñ≤", "‚ñº"]
    
    print("üé® –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–≤–µ—Ç–∞:")
    for i, (color, name) in enumerate(colors):
        with Printer(color, (i * 6 + 1, 1), "#", "simple_font.json") as printer:
            printer.print("AB")
        print(f"   {color.value}{name}{ANSI.RESET.value}")
    
    print(f"\nüî£ –ü—Ä–∏–º–µ—Ä—ã —Å–∏–º–≤–æ–ª–æ–≤: {', '.join(symbols)}")
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    import os
    os.remove("simple_font.json")

def demo_complex_examples():
    """–°–ª–æ–∂–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("\n=== –°–õ–û–ñ–ù–´–ï –ü–†–ò–ú–ï–†–´ ===\n")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —à—Ä–∏—Ñ—Ç
    extended_font = {
        "H": ["# #", "# #", "###", "# #", "# #"],
        "A": [" # ", "# #", "###", "# #", "# #"],
        "P": ["## ", "# #", "## ", "#  ", "#  "],
        "Y": ["# #", "# #", " # ", " # ", " # "],
        "B": ["## ", "# #", "## ", "# #", "## "],
        "R": ["## ", "# #", "## ", "# #", "# #"],
        "T": ["###", " # ", " # ", " # ", " # "],
        "D": ["## ", "# #", "# #", "# #", "## "],
        "!": [" # ", " # ", " # ", "   ", " # "],
        " ": ["   ", "   ", "   ", "   ", "   "]
    }
    
    with open("extended_font.json", "w", encoding="utf-8") as f:
        json.dump(extended_font, f)
    
    print("1. üí¨ –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
    with Printer(Color.CYAN, (1, 1), "‚ô•", "labs/fonts/font5.json") as p1:
        p1.print("HAPPY")
    with Printer(Color.YELLOW, (7, 1), "‚òÖ", "labs/fonts/font5.json") as p2:
        p2.print("BIRTHDAY!")
    print("‚úÖ –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω\n")
    
    print("2. üé≠ –ß–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ —Ü–≤–µ—Ç–æ–≤:")
    colors = [Color.RED, Color.GREEN, Color.BLUE]
    text_parts = ["HAP", "PY ", "DAY"]
    
    for i, (color, text) in enumerate(zip(colors, text_parts)):
        with Printer(color, (15, i * 8 + 1), "‚ô¶", "extended_font.json") as printer:
            printer.print(text)
    print("‚úÖ –¢–µ–∫—Å—Ç —Å —á–µ—Ä–µ–¥–æ–≤–∞–Ω–∏–µ–º —Ü–≤–µ—Ç–æ–≤\n")
    
    print("3. üîÑ –ê–Ω–∏–º–∞—Ü–∏—è (—Å–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤):")
    symbols = ["‚óè", "‚óã", "‚óé", "‚óâ", "‚óã"]
    for symbol in symbols:
        with Printer(Color.MAGENTA, (20, 1), symbol, "extended_font.json") as printer:
            printer.print("COOL")
    print("‚úÖ –ê–Ω–∏–º–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    import os
    os.remove("extended_font.json")

def run_all_demos():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–π"""
    print("üöÄ –ó–ê–ü–£–°–ö –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò PRINTER\n")
    
    try:
        # demo_font_loading()
        # demo_colors_and_symbols()
        # demo_printer_workflow()
        demo_complex_examples()
        
        print("\n" + "="*50)
        print("üéâ –í–°–ï –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–ò –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–´!")
        print("="*50)
        
        print("\nüí° –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–¥–∞:")
        print('''
# –ü—Ä–æ—Å—Ç–µ–π—à–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
with Printer(Color.GREEN, (1, 1), "‚ô°", "font.json") as printer:
    printer.print("I LOVE YOU!")

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥:
Printer.print_static(
    text="HELLO",
    position=(5, 5), 
    color=Color.BLUE,
    symbol="‚òÖ",
    font_file="font.json"
)
        ''')
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    run_all_demos()
